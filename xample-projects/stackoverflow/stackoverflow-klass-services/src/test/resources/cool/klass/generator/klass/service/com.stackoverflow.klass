package com.stackoverflow.inference

/*
 * Auto-generated by {@link cool.klass.generator.klass.service.KlassServiceGenerator}
 */

service User
{
    /user/{userId: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.userId == userId;
            projection  : UserProjection;
        }
    /user
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : UserProjection;
        }
}

service Question
{
    /question/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : QuestionProjection;
        }
    /question
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : QuestionProjection;
        }
}

service Answer
{
    /answer/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : AnswerProjection;
        }
    /answer
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : AnswerProjection;
        }
}

service QuestionVote
{
    /questionVote/{questionId: Long[1..1]}/{createdById: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.questionId == questionId && this.createdById == createdById;
            projection  : QuestionVoteProjection;
        }
    /questionVote
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : QuestionVoteProjection;
        }
}

service Tag
{
    /tag/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : TagProjection;
        }
    /tag
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : TagProjection;
        }
}

service QuestionTagMapping
{
    /questionTagMapping/{questionId: Long[1..1]}/{tagName: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.questionId == questionId && this.tagName == tagName;
            projection  : QuestionTagMappingProjection;
        }
    /questionTagMapping
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : QuestionTagMappingProjection;
        }
}

service QuestionVersion
{
    /questionVersion/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : QuestionVersionProjection;
        }
    /questionVersion
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : QuestionVersionProjection;
        }
}

service AnswerVersion
{
    /answerVersion/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : AnswerVersionProjection;
        }
    /answerVersion
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : AnswerVersionProjection;
        }
}

service TagVersion
{
    /tagVersion/{name: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.name == name;
            projection  : TagVersionProjection;
        }
    /tagVersion
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : TagVersionProjection;
        }
}

