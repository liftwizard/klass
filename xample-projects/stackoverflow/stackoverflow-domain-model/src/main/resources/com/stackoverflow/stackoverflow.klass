/*
 * Simplified StackOverflow domain model. One question has many answers.
 */

// TODO: There should be a maven plugin that compiles the klass files and does nothing else, just to fail the build at the right module
package com.stackoverflow

// 'user' is just a special class that represents logged in users
// There must only be a single user class in the model, it must have a single key, and the key must be of type String. Other properties must be nullable
user User
    read
    systemTemporal
{
    // `read` keyword with no projection means create read services with the default read projection
    // The default read projection includes just this class and all its properties
    userId                 : String key userId;

    // TODO: String max lengths
    firstName              : String?;
    lastName: String?;

    // TODO: Consider adding primitive types like email address and url
    email                  : String?;

    // TODO: Unique property sets
}

enumeration Status
{
    OPEN("Open"),
    ON_HOLD("On hold"),
    CLOSED("Closed"),
}

interface Document
{
    id                     : Long key id;
    body                   : String;

    // votes          : Vote[0..*];
}

// TODO: Sets of unique properties other than keys
// TODO: Try to infer whether a query is for a unique item and assert multiplicity one
// TODO: Check for ownership cycles and give a good error message
// TODO: Errors for using reserved names like system, systemFrom, systemTo, etc.
// TODO: Errors for using versioned when not systemTemporal, audited when not systemTemporal
class Question
    implements Document
    read(QuestionReadProjection)
    systemTemporal
    versioned
    audited
{
    // TODO: When copying id to QuestionVersion, id should be Long key but not id.
    id                     : Long key id;

    // This isn't a real property. It's referenced in criteria as a shorthand. For example Question.system == {time} is shorthand for Question.systemFrom <= {time} && Question.systemTo > {time}
    system                 : TemporalRange? system;

    // These two properties are implied by systemTemporal, and are not supposed to actually be declared
    systemFrom             : TemporalInstant? system from;
    systemTo               : TemporalInstant? system to;

    // TODO: private properties must not be used in projections
    // These three properties and two parameterized properties are implied by audited, and are not supposed to actually be declared
    // They could automatically be part of read projections and not write projections
    createdById            : String createdBy userId final private;

    // createdOn, or createdDate?
    createdOn              : Instant createdOn final;
    lastUpdatedById        : String lastUpdatedBy userId private;

    // createdBy(): User[1..1] createdBy
    // {
    //     this.createdById == User.userId
    // }
    //
    // lastUpdatedBy(): User[1..1] lastUpdatedBy
    // {
    //     this.lastUpdatedById == User.userId
    // }

    title                  : String;

    // TODO: Statemachine
    status                 : Status;
    deleted: Boolean;

    // TODO: Consider type inference on paramterized property parameters based on usage in relationship
    // orderBy natural key ascending is the default
    answersWithSubstring(substring: String[1..1]): Answer[0..*]
        orderBy: this.id ascending
    {
        this.id == Answer.questionId
            && Answer.body contains substring
    }

    activeAnswers(): Answer[0..*]
    {
        this.id == Answer.questionId
            && Answer.deleted == false
    }

    /*
    voteBy(userId: String[1..1] userId): QuestionVote[0..1]
    {
        this.id == QuestionVote.questionId
    }

    upvotes: Integer
    {
        count(this.votes.direction == VoteDirection.UP)
    }

    downvotes: Integer
    {
        count(this.votes.direction == VoteDirection.DOWN)
    }
    */
}

// The _Version class is implied by the versioned annotation, and not supposed to actually be declared
// TODO: If you do declare one, we'd need a special keyword version instead of class
// TODO: Needs a syntax like versions(Question)
// TODO: Error message if versions does point to a version, if the versioned type isn't systemTemporal, maybe also if the versioned type isn't systemTemporal/versioned
/*
class QuestionVersion
    systemTemporal
    versions(Question)
{
    // Key properties copied from Question
    key id            : ID

    // The version number
    // It gets incremented automatically when anything in the version projection gets edited
    // TODO: Consider changing the primitive names to int32, int64, float32, float64, id32, id64
    // TODO: Consider a primitive property type VersionNumber
    number            : Integer
}
*/

class Answer
    implements Document
    systemTemporal
    versioned
    audited
{
    id                     : Long key id;
    questionId             : Long private final;
    deleted                : Boolean;
}

// TODO: Error message if versions doesn't point to a version class
association QuestionHasAnswer
{
    question               : Question[1..1] final;
    answers                : Answer[0..*]
        orderBy: this.id ascending;
}

// The _HasVersion association is implied by the versioned annotation, and not supposed to actually be declared
// It could automatically be part of read projections and not write projections
/*
association QuestionHasVersion
{
    question: Question[1..1];
    version: QuestionVersion[1..1];

    // implied
    relationship this.id == QuestionVersion.id
            && this.system == QuestionVersion.system
}
*/

enumeration VoteDirection
{
    UP("up"),
    DOWN("down"),
}

interface Vote
{
    direction              : VoteDirection;
}

class AbstractVote
    abstract(table-per-subclass)
    implements Vote
    systemTemporal
    audited
{
}

// TODO Model AnswerVote
// TODO Interface Vote
// TODO superclass AbstractVote
// TODO Aggregation for number of upvotes and downvotes
class QuestionVote
    implements Vote
    systemTemporal
    audited
{
    questionId             : Long key final;
    createdById            : String key createdBy userId final;
}

association QuestionHasVotes
{
    question               : Question[1..1] final;
    votes                  : QuestionVote[0..*];
}

projection QuestionVoteWriteProjection on QuestionVote
{
}

/*
service QuestionVote
{
    /question/vote/{questionId: Long[1..1]}
        PUT
        {
            multiplicity: one;
            criteria    : this.questionId == questionId && this.createdById == userId;
            validate    : this.question.createdById != userId
                && (this == null
                || this.systemFrom > now - (5 * 60 * 1000)
                || this.systemFrom < this.question.systemFrom);
            projection  : QuestionVoteWriteProjection;
        }
        DELETE
        {
            multiplicity: one;
            criteria    : this.questionId == questionId && this.createdById == userId;
            validate    : this.systemFrom > now - (5 * 60 * 1000)
                    || this.systemFrom < this.question.systemFrom);
            projection  : QuestionVoteWriteProjection;
        }
}
*/

class Tag
    systemTemporal
    versioned
    audited
{
    name                   : String key;
    description            : String;
}

class QuestionTagMapping
    systemTemporal
{
    questionId             : Long key private final;
    tagName                : String key private final;
}

association QuestionHasTagMappings
{
    question               : Question[1..1] final;
    tags: QuestionTagMapping[0..*] owned
        orderBy: this.tagName;
}

association TagHasQuestionMappings
{
    questions              : QuestionTagMapping[0..*]
        orderBy: this.questionId;
    tag                    : Tag[1..1] final;
}

projection UserProjection on User
{
    userId: "User userId",
    systemFrom: "User systemFrom",
    systemTo: "User systemTo",
}

projection AnswerVersionProjection on AnswerVersion
{
    systemFrom: "AnswerVersion systemFrom",
    systemTo: "AnswerVersion systemTo",
    createdOn: "AnswerVersion createdOn",
    number: "AnswerVersion number",
    createdBy: UserProjection,
    lastUpdatedBy: UserProjection,
}

projection AnswerProjection on Answer
{
    id: "Answer id",
    systemFrom: "Answer systemFrom",
    systemTo: "Answer systemTo",
    createdOn: "Answer createdOn",
    body: "Document body",
    deleted: "Answer deleted",
    version: AnswerVersionProjection,
    createdBy: UserProjection,
    lastUpdatedBy: UserProjection,
}

projection TagProjection on Tag
{
    name: "Tag name",
    systemFrom: "Tag systemFrom",
    systemTo: "Tag systemTo",
}

projection QuestionTagMappingProjection on QuestionTagMapping
{
    systemFrom: "QuestionTagMapping systemFrom",
    systemTo: "QuestionTagMapping systemTo",
    tag: TagProjection,
}

projection QuestionVersionProjection on QuestionVersion
{
    systemFrom: "QuestionVersion systemFrom",
    systemTo: "QuestionVersion systemTo",
    createdOn: "QuestionVersion createdOn",
    number: "QuestionVersion number",
    createdBy: UserProjection,
    lastUpdatedBy: UserProjection,
}

// TODO: Projection inheritance? QuestionReadProjection extends QuestionWriteProjection
projection QuestionReadProjection on Question
{
    // field names are "includes", field values are column headers when serializing to a tabular format
    id             : "Question id",
    systemFrom     : "Question system From",
    systemTo       : "Question system To",
    createdOn      : "Question created on",
    title          : "Question title",
    body           : "Question body",
    status         : "Question status",
    deleted        : "Question is deleted",
    answers: AnswerProjection,
    tags: QuestionTagMappingProjection,
    version: QuestionVersionProjection,
    createdBy: UserProjection,
    lastUpdatedBy: UserProjection,
}

// TODO: Type inference on projection paramters
/*
projection FilteredAnswersProjection(substring: String[1..1]) on Question
{
    title                          : "Question title",
    body                           : "Question body",
    answersWithSubstring(substring):
    {
        body: "Answer body",
    },
}
*/

// Just embed inside the Question class?
service Question
{
    // TODO: matrix url params
    /*
        /question/{id: Long[1..1]}/{substring: String[1..1]}
            GET
            {
                multiplicity: many
                criteria    : this.id == id
                projection  : FilteredAnswersProjection(substring)
            }
        /question/{titleSubstring: String[1..1]}
            GET
            {
                multiplicity: many
                criteria    : this.title startsWith titleSubstring
                projection  : QuestionReadProjection
            }
    */

    // TODO: Service syntax. Parameter must be a message type or projection type.
    /*
    read getById(id: Long[1..1]): QuestionReadProjection[1]
    {
        resource: QuestionResource
        url     : /question/{id: Long[1..1]}
        criteria: this.id == id
    }
    */

    // TODO: Consider forcing exact type matches. Meaning id's type here would be ID, not Long.
    /question/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : QuestionReadProjection;

            // TODO: format: json
        }
        PUT
        {
            // PUT, PATCH, and DELETE should implicitly get ?{version: Integer[1..1]} due to optimistic locking
            // TODO Version should be a primitive type, as in {version: Version[1..1]}
            multiplicity: one;
            criteria    : this.id == id;

            // TODO: Consider 'conflict' 409, 412 Precondition Failed, or 417 Expectation Failed
            // TODO: Allow anonymous/undeclared projections created from all owned association ends
        }
        DELETE
        {
            // TODO
            // PUT, PATCH, and DELETE should implicitly get ?version={version} due to optimistic locking
            multiplicity: one;
            criteria    : this.id == id;

            // 'authorize' is like 'validate' but should give 401 Unauthorized or 403 forbidden instead of 400
            // TODO: conditions implemented in code, like `|| native(UserIsModeratorClass)`
            authorize   : this.createdById == user;
        }
    /question/in?{ids: Long[0..*]}
        GET
        {
            multiplicity: many;
            criteria    : this.id in ids;
            projection  : QuestionReadProjection;
        }

    // TODO: Test urls containing unusual characters like emoji, and %20
    /*
    /question/firstTwo
        GET
        {
            // TODO: Warn if multiplicity is one and criteria uses in clause, or anything other than equality on a unique property
            multiplicity: many;
            criteria    : this.id in (1, 2);
            projection  : QuestionReadProjection;
        }
    */
    /question
        POST
        {
            multiplicity: one;
        }
    /*
    GET
    {
        multiplicity: many;
        criteria    : this.title startsWith "Why do";
        projection  : QuestionReadProjection;
    }
    */

    // TODO: Type inference on url parameters
    // TODO: Consider adding a primitive type UserId
    /user/{userId: String[1..1]}/questions
        GET
        {
            //?page=1&pageSize=25
            multiplicity: many;
            criteria    : this.createdById == userId;
            projection  : QuestionReadProjection;

            // Deliberately shallow
            orderBy     : this.createdOn;

            // pageSize: ???
            // page: ???
        }
}
