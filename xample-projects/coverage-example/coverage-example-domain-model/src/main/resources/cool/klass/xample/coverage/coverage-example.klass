package cool.klass.xample.coverage

// 'user' is just a special class that represents logged in users
// There must only be a single user class in the model, it must have a single key, and the key must be of type String. Other properties must be nullable
user User
    systemTemporal
    versioned
{
    userId   : String key userId;
    firstName: String?;
    lastName : String?;
    email    : String?;
}

projection UserReadProjection on User
{
    userId   : "User id",
    firstName: "User first name",
    lastName : "User last name",
    email    : "User email",
}

service UserResource on User
{
    /user/{userId: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.userId == userId;
            projection  : UserReadProjection;
        }
    /user
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : UserReadProjection;
        }
}

class PropertiesRequired
    systemTemporal
    versioned
    audited
{
    propertiesRequiredId: Long id key;
    requiredString      : String;
    requiredInteger     : Integer;
    requiredLong        : Long;
    requiredDouble      : Double;
    requiredFloat       : Float;
    requiredBoolean     : Boolean;
    requiredInstant     : Instant;
    requiredLocalDate   : LocalDate;
    requiredDerived     : String derived;
}

projection UserProjection on User
{
    userId    : "User userId",
    systemFrom: "User systemFrom",
    systemTo  : "User systemTo",
    firstName : "User firstName",
    lastName  : "User lastName",
    email     : "User email",
}

projection PropertiesRequiredVersionProjection on PropertiesRequiredVersion
{
    systemFrom   : "systemFrom",
    systemTo     : "systemTo",
    createdOn    : "createdOn",
    number       : "number",
    createdBy    : UserProjection,
    lastUpdatedBy: UserProjection,
}

projection PropertiesRequiredProjection on PropertiesRequired
{
    propertiesRequiredId: "propertiesRequiredId",
    systemFrom          : "systemFrom",
    systemTo            : "systemTo",
    createdOn           : "createdOn",
    requiredString      : "requiredString",
    requiredInteger     : "requiredInteger",
    requiredLong        : "requiredLong",
    requiredDouble      : "requiredDouble",
    requiredFloat       : "requiredFloat",
    requiredBoolean     : "requiredBoolean",
    requiredInstant     : "requiredInstant",
    requiredLocalDate   : "requiredLocalDate",
    requiredDerived     : "requiredDerived",
    version             : PropertiesRequiredVersionProjection,
    createdBy           : UserProjection,
    lastUpdatedBy       : UserProjection,
}

service PropertiesRequiredResource on PropertiesRequired
{
    /propertiesRequired
        POST
        {
            multiplicity: one;
        }
    /propertiesRequired/{propertiesRequiredId: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.propertiesRequiredId == propertiesRequiredId;
            projection  : PropertiesRequiredProjection;
        }
        PUT
        {
            multiplicity: one;
            criteria    : this.propertiesRequiredId == propertiesRequiredId;
        }
        PATCH
        {
            multiplicity: one;
            criteria    : this.propertiesRequiredId == propertiesRequiredId;
        }
        DELETE
        {
            multiplicity: one;
            criteria    : this.propertiesRequiredId == propertiesRequiredId;
        }
}

class PropertiesOptional
    systemTemporal
    versioned
    audited
{
    propertiesOptionalId: Long id key;
    optionalString      : String?;
    optionalInteger     : Integer?;
    optionalLong        : Long?;
    optionalDouble      : Double?;
    optionalFloat       : Float?;
    optionalBoolean     : Boolean?;
    optionalInstant     : Instant?;
    optionalLocalDate   : LocalDate?;
    optionalDerived     : String? derived;
}

projection PropertiesOptionalVersionProjection on PropertiesOptionalVersion
{
    systemFrom   : "systemFrom",
    systemTo     : "systemTo",
    createdOn    : "createdOn",
    number       : "number",
    createdBy    : UserProjection,
    lastUpdatedBy: UserProjection,
}

projection PropertiesOptionalCreatedProjection on PropertiesOptional
{
    propertiesOptionalId: "propertiesOptionalId",
    createdOn           : "createdOn",
    optionalString      : "optionalString",
}

projection PropertiesOptionalProjection on PropertiesOptional
{
    propertiesOptionalId: "propertiesOptionalId",
    systemFrom          : "systemFrom",
    systemTo            : "systemTo",
    createdOn           : "createdOn",
    optionalString      : "optionalString",
    optionalInteger     : "optionalInteger",
    optionalLong        : "optionalLong",
    optionalDouble      : "optionalDouble",
    optionalFloat       : "optionalFloat",
    optionalBoolean     : "optionalBoolean",
    optionalInstant     : "optionalInstant",
    optionalLocalDate   : "optionalLocalDate",
    optionalDerived     : "optionalDerived",
    version             : PropertiesOptionalVersionProjection,
    createdBy           : UserProjection,
    lastUpdatedBy       : UserProjection,
}

service PropertiesOptionalResource on PropertiesOptional
{
    /propertiesOptional
        POST
        {
            multiplicity: one;
            projection  : PropertiesOptionalCreatedProjection;
        }
    /propertiesOptional/{propertiesOptionalId: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.propertiesOptionalId == propertiesOptionalId;
            projection  : PropertiesOptionalProjection;
        }
        PUT
        {
            multiplicity: one;
            criteria    : this.propertiesOptionalId == propertiesOptionalId;
        }
        PATCH
        {
            multiplicity: one;
            criteria    : this.propertiesOptionalId == propertiesOptionalId;
        }
        DELETE
        {
            multiplicity: one;
            criteria    : this.propertiesOptionalId == propertiesOptionalId;
        }
}

class EveryTypeKeyProperty
    systemTemporal
    versioned
    audited
{
    keyString           : String key;
    keyInteger          : Integer key;
    keyLong             : Long key;
    keyDouble           : Double key;
    keyFloat            : Float key;
    keyBoolean          : Boolean key;
    keyInstant          : Instant key;
    keyLocalDate        : LocalDate key;
}

class EveryTypeForeignKeyProperty
    systemTemporal
{
    id                  : Long id key;
    foreignKeyString    : String;
    foreignKeyInteger   : Integer;
    foreignKeyLong      : Long;
    foreignKeyDouble    : Double;
    foreignKeyFloat     : Float;
    foreignKeyBoolean   : Boolean;
    foreignKeyInstant   : Instant;
    foreignKeyLocalDate : LocalDate;
    data                : String;
}

association EveryTypeKeyPropertyHasEveryTypeForeignKeyProperty
{
    everyTypeKeyProperty: EveryTypeKeyProperty[1..1];
    everyTypeForeignKeyProperties: EveryTypeForeignKeyProperty[0..*] owned;

    relationship this.keyString == EveryTypeForeignKeyProperty.foreignKeyString
            && this.keyInteger == EveryTypeForeignKeyProperty.foreignKeyInteger
            && this.keyLong == EveryTypeForeignKeyProperty.foreignKeyLong
            && this.keyDouble == EveryTypeForeignKeyProperty.foreignKeyDouble
            && this.keyFloat == EveryTypeForeignKeyProperty.foreignKeyFloat
            && this.keyBoolean == EveryTypeForeignKeyProperty.foreignKeyBoolean
            && this.keyInstant == EveryTypeForeignKeyProperty.foreignKeyInstant
            && this.keyLocalDate == EveryTypeForeignKeyProperty.foreignKeyLocalDate
}

// TODO: Reject types that have all auto-generated ids, foreign keys and no data.
projection EveryTypeKeyPropertyProjection on EveryTypeKeyProperty
{
    keyString              : "keyString",
    keyInteger             : "keyInteger",
    keyLong                : "keyLong",
    keyDouble              : "keyDouble",
    keyFloat               : "keyFloat",
    keyBoolean             : "keyBoolean",
    keyInstant             : "keyInstant",
    keyLocalDate           : "keyLocalDate",
    everyTypeForeignKeyProperties:
    {
        id                 : "id",
        foreignKeyString   : "foreignKeyString",
        foreignKeyInteger  : "foreignKeyInteger",
        foreignKeyLong     : "foreignKeyLong",
        foreignKeyDouble   : "foreignKeyDouble",
        foreignKeyFloat    : "foreignKeyFloat",
        foreignKeyBoolean  : "foreignKeyBoolean",
        foreignKeyInstant  : "foreignKeyInstant",
        foreignKeyLocalDate: "foreignKeyLocalDate",
        data               : "data",
    },
    version:
    {
        number: "number",
    },
}

service EveryTypeKeyPropertyResource on EveryTypeKeyProperty
{
    /everyTypeKeyProperty
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : EveryTypeKeyPropertyProjection;
        }
        POST
        {
            multiplicity: one;
        }
    /everyTypeKeyProperty/{keyString: String[1..1]}/{keyInteger: Integer[1..1]}/{keyLong: Long[1..1]}/{keyDouble: Double[1..1]}/{keyFloat: Float[1..1]}/{keyBoolean: Boolean[1..1]}/{keyInstant: Instant[1..1]}/{keyLocalDate: LocalDate[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.keyString == keyString
                    && this.keyInteger == keyInteger
                    && this.keyLong == keyLong
                    && this.keyDouble == keyDouble
                    && this.keyFloat == keyFloat
                    && this.keyBoolean == keyBoolean
                    && this.keyInstant == keyInstant
                    && this.keyLocalDate == keyLocalDate;
            projection  : EveryTypeKeyPropertyProjection;
        }
        PUT
        {
            multiplicity: one;
            criteria    :
                this.keyString == keyString
                    && this.keyInteger == keyInteger
                    && this.keyLong == keyLong
                    && this.keyDouble == keyDouble
                    && this.keyFloat == keyFloat
                    && this.keyBoolean == keyBoolean
                    && this.keyInstant == keyInstant
                    && this.keyLocalDate == keyLocalDate;
        }
        PATCH
        {
            multiplicity: one;
            criteria    :
                this.keyString == keyString
                    && this.keyInteger == keyInteger
                    && this.keyLong == keyLong
                    && this.keyDouble == keyDouble
                    && this.keyFloat == keyFloat
                    && this.keyBoolean == keyBoolean
                    && this.keyInstant == keyInstant
                    && this.keyLocalDate == keyLocalDate;
        }
        DELETE
        {
            multiplicity: one;
            criteria    :
                this.keyString == keyString
                    && this.keyInteger == keyInteger
                    && this.keyLong == keyLong
                    && this.keyDouble == keyDouble
                    && this.keyFloat == keyFloat
                    && this.keyBoolean == keyBoolean
                    && this.keyInstant == keyInstant
                    && this.keyLocalDate == keyLocalDate;
        }
}

class FinalProperties
{
    id  : Long key id;
    data: String final;
}

projection FinalPropertiesProjection on FinalProperties
{
    id  : "FinalProperties id",
    data: "FinalProperties data",
}

service FinalPropertiesResource on FinalProperties
{
    /finalProperties/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : FinalPropertiesProjection;
        }
        PUT
        {
            criteria    : this.id == id;
        }
        PATCH
        {
            criteria    : this.id == id;
        }
        DELETE
        {
            criteria    : this.id == id;
        }
    /finalProperties
        POST
        {
        }
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : FinalPropertiesProjection;
        }
}

// TODO: unowned
// TODO: many-to-one

class OwnedNaturalOneToManySource
{
    key: String key;
    value: String;
}

class OwnedNaturalOneToManyTarget
{
    key: String key;
    sourceKey: String private;
    value: String;
}

association OwnedNaturalOneToMany
{
    source: OwnedNaturalOneToManySource[1..1];
    targets: OwnedNaturalOneToManyTarget[1..*] owned;

    relationship this.key == OwnedNaturalOneToManyTarget.sourceKey
}

class OwnedNaturalOneToOneSource
{
    key: String key;
    value: String;
}

class OwnedNaturalOneToOneTarget
{
    key: String key;
    sourceKey: String private;
    value: String;
}

association OwnedNaturalOneToOne
{
    source: OwnedNaturalOneToOneSource[1..1];
    target: OwnedNaturalOneToOneTarget[1..1] owned;

    relationship this.key == OwnedNaturalOneToOneTarget.sourceKey
}

class OwnedNaturalOneToManySelf
{
    key: String key;
    sourceKey: String? private;
    value: String;
}

association SelfOwnedNaturalOneToMany
{
    source: OwnedNaturalOneToManySelf[0..1];
    target: OwnedNaturalOneToManySelf[0..*] owned;

    relationship this.key == OwnedNaturalOneToManySelf.sourceKey
}

class OwnedSyntheticOneToManySource
{
    id: Long id key;
    value: String;
}

class OwnedSyntheticOneToManyTarget
{
    id: Long id key;
    sourceId: Long private;
    value: String;
}

association OwnedSyntheticOneToMany
{
    source: OwnedSyntheticOneToManySource[1..1];
    targets: OwnedSyntheticOneToManyTarget[1..*] owned;

    relationship this.id == OwnedSyntheticOneToManyTarget.sourceId
}

class OwnedSyntheticOneToOneSource
{
    id: Long id key;
    value: String;
}

class OwnedSyntheticOneToOneTarget
{
    id: Long id key;
    sourceId: Long private;
    value: String;
}

association OwnedSyntheticOneToOne
{
    source: OwnedSyntheticOneToOneSource[1..1];
    target: OwnedSyntheticOneToOneTarget[1..1] owned;

    relationship this.id == OwnedSyntheticOneToOneTarget.sourceId
}

class OwnedSyntheticOneToManySelf
{
    id: Long id key;
    sourceId: Long? private;
    value: String;
}

association SelfOwnedSyntheticOneToMany
{
    source: OwnedSyntheticOneToManySelf[0..1];
    target: OwnedSyntheticOneToManySelf[0..*] owned;

    relationship this.id == OwnedSyntheticOneToManySelf.sourceId
}

class SharedNaturalManyToOneTarget
{
    key: String key;
    value: String;
}

class SharedNaturalManyToOneSource
{
    key: String key;
    targetKey: String private;
    value: String;
}

// TODO: Add ManyToOneOptional [0..*]-->[0..1]

association SharedNaturalManyToOne
{
    sources: SharedNaturalManyToOneSource[0..*];
    target: SharedNaturalManyToOneTarget[1..1];

    relationship this.targetKey == SharedNaturalManyToOneTarget.key
}

class SharedNaturalOneToManySource
{
    key: String key;
    value: String;
}

class SharedNaturalOneToManyTarget
{
    key: String key;
    sourceKey: String private;
    value: String;
}

association SharedNaturalOneToMany
{
    source: SharedNaturalOneToManySource[1..1];
    targets: SharedNaturalOneToManyTarget[1..*];

    relationship this.key == SharedNaturalOneToManyTarget.sourceKey
}

class SharedNaturalOneToOneSource
{
    key: String key;
    value: String;
}

class SharedNaturalOneToOneTarget
{
    key: String key;
    sourceKey: String private;
    value: String;
}

association SharedNaturalOneToOne
{
    source: SharedNaturalOneToOneSource[1..1];
    target: SharedNaturalOneToOneTarget[0..1];

    relationship this.key == SharedNaturalOneToOneTarget.sourceKey
}

class SharedNaturalOneToManySelf
{
    key: String key;
    sourceKey: String? private;
    value: String;
}

association SelfSharedNaturalOneToMany
{
    source: SharedNaturalOneToManySelf[0..1];
    target: SharedNaturalOneToManySelf[0..*];

    relationship this.key == SharedNaturalOneToManySelf.sourceKey
}

class SharedSyntheticOneToManySource
{
    id: Long id key;
    value: String;
}

class SharedSyntheticOneToManyTarget
{
    id: Long id key;
    sourceId: Long private;
    value: String;
}

association SharedSyntheticOneToMany
{
    source: SharedSyntheticOneToManySource[1..1];
    targets: SharedSyntheticOneToManyTarget[1..*];

    relationship this.id == SharedSyntheticOneToManyTarget.sourceId
}

class SharedSyntheticOneToOneSource
{
    id: Long id key;
    value: String;
}

class SharedSyntheticOneToOneTarget
{
    id: Long id key;
    sourceId: Long private;
    value: String;
}

association SharedSyntheticOneToOne
{
    source: SharedSyntheticOneToOneSource[1..1];
    target: SharedSyntheticOneToOneTarget[0..1];

    relationship this.id == SharedSyntheticOneToOneTarget.sourceId
}

class SharedSyntheticOneToManySelf
{
    id: Long id key;
    sourceId: Long? private;
    value: String;
}

association SelfSharedSyntheticOneToMany
{
    source: SharedSyntheticOneToManySelf[0..1];
    target: SharedSyntheticOneToManySelf[0..*];

    relationship this.id == SharedSyntheticOneToManySelf.sourceId
}

class ClassOwningClassWithDerivedProperty
{
    key: String key;
}

class ClassWithDerivedProperty
{
    key: String key;
    classOwningClassWithDerivedPropertyKey: String private;
    derivedRequiredString: String derived;
    derivedRequiredInteger: Integer derived;
    derivedRequiredLong: Long derived;
    derivedRequiredDouble: Double derived;
    derivedRequiredFloat: Float derived;
    derivedRequiredBoolean: Boolean derived;
    derivedRequiredInstant: Instant derived;
    derivedRequiredLocalDate: LocalDate derived;
    derivedOptionalString: String? derived;
    derivedOptionalInteger: Integer? derived;
    derivedOptionalLong: Long? derived;
    derivedOptionalDouble: Double? derived;
    derivedOptionalFloat: Float? derived;
    derivedOptionalBoolean: Boolean? derived;
    derivedOptionalInstant: Instant? derived;
    derivedOptionalLocalDate: LocalDate? derived;
}

association ClassHasClassesWithDerivedProperty
{
    classOwningClassWithDerivedProperty: ClassOwningClassWithDerivedProperty[1..1];
    classWithDerivedProperties: ClassWithDerivedProperty[0..*] owned
        orderBy: this.derivedRequiredString ascending,
        this.derivedRequiredInteger ascending,
        this.derivedRequiredLong ascending,
        this.derivedRequiredDouble ascending,
        this.derivedRequiredFloat ascending,
        this.derivedRequiredBoolean ascending,
        this.derivedRequiredInstant ascending,
        this.derivedRequiredLocalDate ascending,
        this.derivedOptionalString ascending,
        this.derivedOptionalInteger ascending,
        this.derivedOptionalLong ascending,
        this.derivedOptionalDouble ascending,
        this.derivedOptionalFloat ascending,
        this.derivedOptionalBoolean ascending,
        this.derivedOptionalInstant ascending,
        this.derivedOptionalLocalDate ascending;
}
