/*
 * Copyright 2025 Craig Motlin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cool.klass.generator.grahql.reladomo.finder;

import java.nio.file.Path;

import javax.annotation.Nonnull;

import cool.klass.generator.perpackage.AbstractPerPackageGenerator;
import cool.klass.model.meta.domain.api.Classifier;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.property.Property;

public class GraphQLReladomoFinderGenerator extends AbstractPerPackageGenerator {

    public GraphQLReladomoFinderGenerator(@Nonnull DomainModel domainModel) {
        super(domainModel);
    }

    @Nonnull
    @Override
    protected Path getPluginRelativePath(Path path) {
        return path.resolve("graphql").resolve("schema").resolve("finder");
    }

    @Nonnull
    @Override
    protected String getFileName() {
        return "GraphQLFinders.graphqls";
    }

    @Nonnull
    @Override
    protected String getPackageSourceCode(@Nonnull String fullyQualifiedPackage) {
        String topLevelElementsCode = this.domainModel.getClassifiers()
            .select(each -> each.getPackageName().equals(fullyQualifiedPackage))
            .collect(this::getSourceCode)
            .makeString("");

        String sourceCode =
            "" + "# Auto-generated by " + this.getClass().getCanonicalName() + "\n" + "\n" + topLevelElementsCode;

        return sourceCode;
    }

    private String getSourceCode(@Nonnull Classifier classifier) {
        String classifierName = classifier.getName();
        return (
            "" +
            "input _" +
            classifierName +
            "Finder {\n" +
            "    AND: [_" +
            classifierName +
            "Finder!]\n" +
            "    OR:  [_" +
            classifierName +
            "Finder!]\n" +
            "    exists            : _Empty\n" +
            "    notExists         : _" +
            classifierName +
            "Finder\n" +
            "    recursiveNotExists: _" +
            classifierName +
            "Finder\n" +
            classifier.getProperties().collect(this::getSourceCode).makeString("") +
            "}\n" +
            "\n"
        );
    }

    private String getSourceCode(Property property) {
        var visitor = new PropertySourceCodeVisitor();
        property.visit(visitor);
        return visitor.getSourceCode();
    }
}
