package cool.klass.generator.klass.service;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.nio.file.Path;
import java.text.MessageFormat;
import java.util.Objects;

import javax.annotation.Nonnull;

import com.google.common.base.CaseFormat;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Klass;
import cool.klass.model.meta.domain.api.NamedElement;
import cool.klass.model.meta.domain.api.PackageableElement;
import cool.klass.model.meta.domain.api.property.DataTypeProperty;
import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.list.ListIterable;
import org.eclipse.collections.api.tuple.Pair;

public class KlassServiceGenerator
{
    @Nonnull
    private final DomainModel domainModel;

    public KlassServiceGenerator(@Nonnull DomainModel domainModel)
    {
        this.domainModel = Objects.requireNonNull(domainModel);
    }

    public void writeKlassFiles(@Nonnull Path outputPath)
    {
        this.domainModel
                .getClasses()
                .groupBy(PackageableElement::getPackageName)
                .keyMultiValuePairsView()
                .forEachWith(this::writeFile, outputPath);
    }

    private void writeFile(Pair<String, RichIterable<Klass>> packagePair, Path outputPath)
    {
        String              fullyQualifiedPackage = packagePair.getOne();
        RichIterable<Klass> klasses               = packagePair.getTwo();

        Path   klassOutputPath   = this.getOutputPath(outputPath, fullyQualifiedPackage);
        String serviceSourceCode = this.getKlassSourceCode(klasses, fullyQualifiedPackage);

        this.printStringToFile(klassOutputPath, serviceSourceCode);
    }

    @Nonnull
    private Path getOutputPath(
            @Nonnull Path outputPath,
            @Nonnull String fullyQualifiedPackage)
    {
        String packageRelativePath = fullyQualifiedPackage.replaceAll("\\.", "/");
        Path   klassDirectory      = outputPath.resolve(packageRelativePath);
        String fileName            = fullyQualifiedPackage + ".klass";

        klassDirectory.toFile().mkdirs();
        return klassDirectory.resolve(fileName);
    }

    @Nonnull
    private String getKlassSourceCode(
            @Nonnull RichIterable<Klass> klasses,
            @Nonnull String fullyQualifiedPackage)
    {
        String sourceCode = klasses
                .collect(KlassServiceGenerator::getSourceCode)
                .makeString("");

        //language=Klass
        return "package " + fullyQualifiedPackage + ".inference\n"
                + "\n"
                + "/*\n"
                + " * Auto-generated by {@link cool.klass.generator.klass.service.KlassSummaryServiceGenerator}\n"
                + " */\n"
                + "\n"
                + sourceCode;
    }

    private static String getSourceCode(Klass klass)
    {
        String               className     = klass.getName();
        String               lowercaseName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, className);
        ListIterable<String> urlPaths      = getUrlPaths(klass);
        ListIterable<String> criteria      = getCriteria(klass);

        return ""
                + "service " + className + "\n"
                + "{\n"
                + "    /" + lowercaseName + urlPaths.makeString("") + "\n"
                + "        GET\n"
                + "        {\n"
                + "            multiplicity: one;\n"
                + "            criteria    : " + criteria.makeString(" && ") + ";\n"
                + "            projection  : " + className + "Projection;\n"
                + "        }\n"
                + "    /" + lowercaseName + "\n"
                + "        GET\n"
                + "        {\n"
                + "            multiplicity: many;\n"
                + "            criteria    : all;\n"
                + "            projection  : " + className + "Projection;\n"
                + "        }\n"
                + "}\n"
                + "\n";
    }

    private static ListIterable<String> getUrlPaths(Klass klass)
    {
        return klass.getKeyProperties()
                .collect(KlassServiceGenerator::getUrlPath);
    }

    private static String getUrlPath(DataTypeProperty dataTypeProperty)
    {
        String name         = dataTypeProperty.getName();
        String type         = dataTypeProperty.getType().getDataTypeName();
        String multiplicity = dataTypeProperty.isRequired() ? "1..1" : "0..1";
        return String.format("/{%s: %s[%s]}", name, type, multiplicity);
    }

    private static ListIterable<String> getCriteria(Klass klass)
    {
        return klass.getKeyProperties()
                .collect(NamedElement::getName)
                .collect(name -> MessageFormat.format("this.{0} == {0}", name));
    }

    private void printStringToFile(@Nonnull Path path, String contents)
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
        catch (FileNotFoundException e)
        {
            throw new RuntimeException(e);
        }
    }
}
