package cool.klass.generator.grahql.schema;

import java.nio.file.Path;

import javax.annotation.Nonnull;

import cool.klass.generator.perpackage.AbstractPerPackageGenerator;
import cool.klass.model.meta.domain.api.Classifier;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.TopLevelElement;

public class GraphQLSchemaGenerator
        extends AbstractPerPackageGenerator
{
    public GraphQLSchemaGenerator(@Nonnull DomainModel domainModel)
    {
        super(domainModel);
    }

    @Nonnull
    @Override
    protected Path getPluginRelativePath(Path path)
    {
        return path
                .resolve("graphql")
                .resolve("schema");
    }

    @Nonnull
    @Override
    protected String getFileName()
    {
        return "GraphQLSchema.graphqls";
    }

    @Nonnull
    @Override
    protected String getPackageSourceCode(@Nonnull String fullyQualifiedPackage)
    {
        String orderBySourceCode = this.domainModel
                .getClassifiers()
                .collect(this::getOrderBySourceCode)
                .makeString("");

        String topLevelElementsCode = this.domainModel
                .getTopLevelElements()
                .collect(this::getSourceCode)
                .makeString("");

        //language=GraphQL
        String sourceCode = ""
                + "# Generated by cool.klass.generator.grahql.schema.GraphQLSchemaGenerator\n"
                + "\n"
                + "# Order Bys\n"
                + orderBySourceCode
                + "\n"
                + "# Top Level Elements\n"
                + topLevelElementsCode;

        return sourceCode;
    }

    private String getOrderBySourceCode(Classifier classifier)
    {
        //language=GraphQL
        return "input _" + classifier.getName() + "OrderBy {\n"
                + "    attribute: _" + classifier.getName() + "Finder\n"
                + "    direction: _OrderByDirection\n"
                + "}\n\n";
    }

    private String getSourceCode(@Nonnull TopLevelElement topLevelElement)
    {
        var visitor = new GraphQLElementToSchemaSourceVisitor();
        topLevelElement.visit(visitor);
        return visitor.getSourceCode();
    }
}
