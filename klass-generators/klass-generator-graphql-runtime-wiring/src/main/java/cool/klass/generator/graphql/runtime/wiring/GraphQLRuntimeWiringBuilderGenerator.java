package cool.klass.generator.graphql.runtime.wiring;

import java.nio.file.Path;

import javax.annotation.Nonnull;

import cool.klass.generator.perpackage.AbstractPerPackageGenerator;
import cool.klass.model.meta.domain.api.Classifier;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Klass;
import org.eclipse.collections.api.list.ImmutableList;

public class GraphQLRuntimeWiringBuilderGenerator
        extends AbstractPerPackageGenerator
{
    public GraphQLRuntimeWiringBuilderGenerator(@Nonnull DomainModel domainModel)
    {
        super(domainModel);
    }

    @Nonnull
    @Override
    protected Path getPluginRelativePath(Path path)
    {
        return path
                .resolve("graphql")
                .resolve("runtime")
                .resolve("wiring");
    }

    @Nonnull
    @Override
    protected String getFileName()
    {
        return "RuntimeWiringBuilder.java";
    }

    @Nonnull
    @Override
    protected String getPackageSourceCode(@Nonnull String fullyQualifiedPackage)
    {
        ImmutableList<Klass> classes = this.domainModel
                .getClasses()
                .select(each -> each.getPackageName().equals(fullyQualifiedPackage));

        // @formatter:off
        //language=JAVA
        String sourceCode = ""
                + "package " + fullyQualifiedPackage + ".graphql.runtime.wiring;\n"
                + "\n"
                + "import java.util.Objects;\n"
                + "import java.util.function.Consumer;\n"
                + "\n"
                + "import cool.klass.data.store.reladomo.ReladomoDataStore;\n"
                + "import cool.klass.model.meta.domain.api.DomainModel;\n"
                + "import cool.klass.reladomo.graphql.deep.fetcher.GraphQLDeepFetcher;\n"
                + "import graphql.scalars.java.JavaPrimitives;\n"
                + "import graphql.schema.idl.RuntimeWiring.Builder;\n"
                + "import io.liftwizard.graphql.scalar.temporal.GraphQLLocalDateScalar;\n"
                + "import io.liftwizard.graphql.scalar.temporal.GraphQLTemporalScalar;\n"
                + "import " + fullyQualifiedPackage + ".graphql.runtime.wiring.query.QueryTypeRuntimeWiringProvider;\n"
                + classes.collect(this::getImport).makeString("")
                + "\n"
                + "/**\n"
                + " * Auto-generated by {@link " + this.getClass().getCanonicalName() + "}\n"
                + " */\n"
                + "public class RuntimeWiringBuilder\n"
                + "        implements Consumer<Builder>\n"
                + "{\n"
                + "    private final DomainModel       domainModel;\n"
                + "    private final ReladomoDataStore dataStore;\n"
                + "\n"
                + "    public RuntimeWiringBuilder(DomainModel domainModel, ReladomoDataStore dataStore)\n"
                + "    {\n"
                + "        this.domainModel = Objects.requireNonNull(domainModel);\n"
                + "        this.dataStore   = Objects.requireNonNull(dataStore);\n"
                + "    }\n"
                + "\n"
                + "    @Override\n"
                + "    public void accept(Builder builder)\n"
                + "    {\n"
                + "        builder\n"
                + "                .scalar(GraphQLTemporalScalar.INSTANT_INSTANCE)\n"
                + "                .scalar(GraphQLTemporalScalar.TEMPORAL_INSTANT_INSTANCE)\n"
                + "                .scalar(GraphQLTemporalScalar.TEMPORAL_RANGE_INSTANCE)\n"
                + "                .scalar(JavaPrimitives.GraphQLLong)\n"
                + "                .scalar(GraphQLLocalDateScalar.INSTANCE)\n"
                + "                .type(new QueryTypeRuntimeWiringProvider(this.domainModel, this.dataStore).get())\n"
                + classes.collect(this::getSourceCode).makeString("\n") + ";\n"
                + "    }\n"
                + "}\n";
        // @formatter:on

        return sourceCode;
    }

    private String getImport(Classifier classifier)
    {
        return String.format(
                "import %s.graphql.type.runtime.wiring.%sTypeRuntimeWiringProvider;\n",
                classifier.getPackageName(),
                classifier.getName());
    }

    private String getSourceCode(Classifier classifier)
    {
        return String.format(
                "                .type(new %sTypeRuntimeWiringProvider().get())",
                classifier.getName());
    }
}
