package cool.klass.generator.json.view;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Path;
import java.time.Instant;
import java.util.Objects;

import javax.annotation.Nonnull;

import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.projection.Projection;

// TODO: Refactor out the commonality between the several Generators
public class JsonViewGenerator
{
    @Nonnull
    private final DomainModel domainModel;
    @Nonnull
    private final String      rootPackageName;
    @Nonnull
    private final String      applicationName;
    @Nonnull
    private final Instant     now;

    public JsonViewGenerator(
            @Nonnull DomainModel domainModel,
            @Nonnull String rootPackageName,
            @Nonnull String applicationName,
            @Nonnull Instant now)
    {
        this.domainModel = Objects.requireNonNull(domainModel);
        this.rootPackageName = Objects.requireNonNull(rootPackageName);
        this.applicationName = Objects.requireNonNull(applicationName);
        this.now = Objects.requireNonNull(now);
    }

    public void writeJsonViews(@Nonnull Path outputPath) throws IOException
    {
        for (Projection projection : this.domainModel.getProjections())
        {
            Path jsonViewOutputPath = this.getJsonViewOutputPath(outputPath, projection);
            this.printStringToFile(jsonViewOutputPath, this.getJsonViewSourceCode(projection));
        }
    }

    @Nonnull
    private Path getJsonViewOutputPath(
            @Nonnull Path outputPath,
            @Nonnull Projection packageableElement)
    {
        String packageRelativePath = packageableElement.getPackageName()
                .replaceAll("\\.", "/");
        Path outputDirectory = outputPath
                .resolve(packageRelativePath)
                .resolve("json")
                .resolve("view");
        outputDirectory.toFile().mkdirs();
        String fileName = packageableElement.getName() + "_JsonView.java";
        return outputDirectory.resolve(fileName);
    }

    private void printStringToFile(@Nonnull Path path, String contents) throws FileNotFoundException
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
    }

    @Nonnull
    private String getJsonViewSourceCode(@Nonnull Projection projection)
    {
        // @formatter:off
        //language=JAVA
        return ""
                + "package " + projection.getPackageName() + ".json.view;\n"
                + "\n"
                + "import javax.annotation.Generated;\n"
                + "\n"
                + "import cool.klass.model.meta.domain.api.projection.Projection;\n"
                + "import cool.klass.serialization.jackson.jsonview.KlassJsonView;\n"
                + "import " + this.rootPackageName + ".meta.constants." + this.applicationName + "DomainModel;\n"
                + "\n"
                + "/**\n"
                + " * Auto-generated by {@link cool.klass.generator.json.view.JsonViewGenerator}\n"
                + " */\n"
                + "@Generated(\n"
                + "        value = \"cool.klass.generator.json.view.JsonViewGenerator\",\n"
                + "        date = \"" + this.now + "\")\n"
                + "public class " + projection.getName() + "_JsonView implements KlassJsonView\n"
                + "{\n"
                + "    @Override\n"
                + "    public Projection getProjection()\n"
                + "    {\n"
                + "        return " + this.applicationName + "DomainModel." + projection.getName() + ";\n"
                + "    }\n"
                + "}\n";
        // @formatter:on
    }
}
