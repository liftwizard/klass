package cool.klass.generator.grahql.fragment;

import javax.annotation.Nonnull;

import cool.klass.model.meta.domain.api.Classifier;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.property.AssociationEnd;
import cool.klass.model.meta.domain.api.property.DataTypeProperty;
import cool.klass.model.meta.domain.api.property.ReferenceProperty;

public final class GraphQLFragmentSourceCodeGenerator
{
    private GraphQLFragmentSourceCodeGenerator()
    {
        throw new AssertionError("Suppress default constructor for noninstantiability");
    }

    @Nonnull
    public static String getPackageSourceCode(DomainModel domainModel, String fullyQualifiedPackage)
    {
        String sourceCode = domainModel
                .getClassifiers()
                .select(c -> c.getPackageName().equals(fullyQualifiedPackage))
                .collect(GraphQLFragmentSourceCodeGenerator::getSourceCode)
                .makeString("");

        return ""
               + "# Auto-generated by " + GraphQLFragmentSourceCodeGenerator.class.getCanonicalName() + "\n"
               + "\n"
               + sourceCode;
    }

    private static String getSourceCode(Classifier classifier)
    {
        String dataTypePropertiesSourceCode = classifier
                .getDataTypeProperties()
                .reject(DataTypeProperty::isDerived)
                .reject(DataTypeProperty::isPrivate)
                .reject(dataTypeProperty -> dataTypeProperty.isForeignKey() && !dataTypeProperty.isForeignKeyToSelf())
                .collect(GraphQLFragmentSourceCodeGenerator::getSourceCode)
                .makeString("");

        String referencePropertiesSourceCode = classifier
                .getProperties()
                .selectInstancesOf(ReferenceProperty.class)
                .select(GraphQLFragmentSourceCodeGenerator::includeInProjection)
                .reject(ReferenceProperty::isPrivate)
                .collect(GraphQLFragmentSourceCodeGenerator::getSourceCode)
                .makeString("");

        return "fragment " + classifier.getName() + "Fragment on " + classifier.getName() + " {\n"
               + dataTypePropertiesSourceCode
               + referencePropertiesSourceCode
               + "}\n\n";
    }

    private static String getSourceCode(DataTypeProperty dataTypeProperty)
    {
        return String.format("    %s\n", dataTypeProperty.getName());
    }

    private static String getSourceCode(ReferenceProperty referenceProperty)
    {
        return "    " + referenceProperty.getName() + " {\n"
               + GraphQLFragmentSourceCodeGenerator.getReferencePropertyBody(referenceProperty)
               + "    }\n";
    }

    private static String getReferencePropertyBody(ReferenceProperty referenceProperty)
    {
        Classifier classifier = referenceProperty.getType();
        if (referenceProperty.isOwned() || GraphQLFragmentSourceCodeGenerator.isOneRequiredToOneOptional(referenceProperty))
        {
            return "        ..." + classifier.getName() + "Fragment\n";
        }

        return classifier
                .getKeyProperties()
                .reject(dataTypeProperty -> dataTypeProperty.isForeignKey() && !dataTypeProperty.isForeignKeyToSelf())
                .collect(dataTypeProperty -> String.format("        %s\n", dataTypeProperty.getName()))
                .makeString("");
    }

    private static boolean isOneRequiredToOneOptional(ReferenceProperty referenceProperty)
    {
        return referenceProperty instanceof AssociationEnd associationEnd && associationEnd.getMultiplicity().isToOne()
               && !associationEnd.getMultiplicity().isRequired()
               && associationEnd.getOpposite().getMultiplicity().isToOne()
               && associationEnd.getOpposite().getMultiplicity().isRequired();
    }

    private static boolean includeInProjection(ReferenceProperty referenceProperty)
    {
        return !(referenceProperty instanceof AssociationEnd associationEnd)
               || associationEnd.getOwningAssociation().getTargetAssociationEnd() == associationEnd;
    }
}
