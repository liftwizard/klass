package cool.klass.generator.grahql.fragment;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.nio.file.Path;
import java.util.Objects;

import javax.annotation.Nonnull;

import com.google.common.base.CaseFormat;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Klass;
import cool.klass.model.meta.domain.api.property.DataTypeProperty;

public class GraphQLFragmentGenerator
{
    @Nonnull
    private final DomainModel domainModel;
    @Nonnull
    private final String      rootPackageName;
    @Nonnull
    private final String      applicationName;

    public GraphQLFragmentGenerator(
            @Nonnull DomainModel domainModel,
            @Nonnull String rootPackageName,
            @Nonnull String applicationName)
    {
        this.domainModel     = Objects.requireNonNull(domainModel);
        this.rootPackageName = Objects.requireNonNull(rootPackageName);
        this.applicationName = Objects.requireNonNull(applicationName);
    }

    public void writeFragmentFiles(@Nonnull Path outputPath)
    {
        String topLevelElementsCode = this.domainModel.getClasses()
                .collect(this::getSourceCode)
                .makeString("");

        String sourceCode = ""
                + "# Generated by cool.klass.generator.grahql.fragment.GraphQLFragmentGenerator\n"
                + "\n"
                + topLevelElementsCode;

        Path fragmentsOutputPath = this.getOutputPath(outputPath);
        this.printStringToFile(fragmentsOutputPath, sourceCode);
    }

    @Nonnull
    private Path getOutputPath(@Nonnull Path outputPath)
    {
        String packageRelativePath = this.rootPackageName.replaceAll("\\.", "/");
        Path outputDirectory = outputPath
                .resolve(packageRelativePath)
                .resolve("graphql")
                .resolve("fragment");
        outputDirectory.toFile().mkdirs();
        String fileName = this.applicationName + ".graphqls";
        return outputDirectory.resolve(fileName);
    }

    private String getSourceCode(@Nonnull Klass klass)
    {
        String lowerCaseName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, klass.getName());

        return "fragment " + lowerCaseName + "Fragment on " + klass.getName() + " {\n"
                + klass.getDataTypeProperties().collect(this::getSourceCode).makeString("")
                + "}\n\n";
    }

    private String getSourceCode(DataTypeProperty dataTypeProperty)
    {
        return String.format("    %s\n", dataTypeProperty.getName());
    }

    private void printStringToFile(@Nonnull Path path, String contents)
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
        catch (FileNotFoundException e)
        {
            throw new RuntimeException(e);
        }
    }
}
