package cool.klass.generator.reladomo.readable;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Objects;

import javax.annotation.Nonnull;

import com.google.common.base.CaseFormat;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Klass;
import cool.klass.model.meta.domain.api.NamedElement;
import cool.klass.model.meta.domain.api.PrimitiveType;
import cool.klass.model.meta.domain.api.property.PrimitiveProperty;
import cool.klass.reladomo.primitive.visitor.PrimitiveToReladomoTypeVisitor;
import org.eclipse.collections.api.list.ImmutableList;

public class ReladomoReadableInterfaceGenerator
{
    private final DomainModel domainModel;

    public ReladomoReadableInterfaceGenerator(DomainModel domainModel)
    {
        this.domainModel = Objects.requireNonNull(domainModel);
    }

    public void writeReadableInterfaces(@Nonnull Path path)
    {
        for (Klass klass : this.domainModel.getClasses())
        {
            String sourceCode   = this.getSourceCode(klass);
            String packageName  = klass.getPackageName() + ".reladomo.readable";
            String relativePath = packageName.replaceAll("\\.", "/");
            Path   parentPath   = path.resolve(relativePath);
            createDirectories(parentPath);

            String fileName   = "ReladomoReadable" + klass.getName() + ".java";
            Path   outputPath = parentPath.resolve(fileName);

            this.printStringToFile(outputPath, sourceCode);
        }
    }

    private static void createDirectories(Path dir)
    {
        try
        {
            Files.createDirectories(dir);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }

    public String getSourceCode(@Nonnull Klass klass)
    {
        Objects.requireNonNull(klass);

        String packageName = klass.getPackageName();
        String className   = klass.getName();
        ImmutableList<PrimitiveProperty> primitiveProperties = klass
                .getProperties()
                .selectInstancesOf(PrimitiveProperty.class);

        String propertiesSourceCode = this.getPropertiesSourceCode(primitiveProperties);

        //language=JAVA
        return ""
                + "package " + packageName + ".reladomo.readable;\n"
                + "\n"
                + "import javax.annotation.*;\n"
                + "import java.sql.*;\n"
                + "import java.time.*;\n"
                + "\n"
                + "/**\n"
                + " * Auto-generated by {@link " + this.getClass().getCanonicalName() + "}\n"
                + " */\n"
                + "public interface ReladomoReadable" + className + "\n"
                + "{\n"
                + propertiesSourceCode
                + "}\n";
    }

    private String getPropertiesSourceCode(ImmutableList<PrimitiveProperty> properties)
    {
        return properties
                .collect(this::getPropertySourceCode)
                .makeString("\n");
    }

    private String getPropertySourceCode(PrimitiveProperty property)
    {
        ImmutableList<String> propertyModifierNames = property.getPropertyModifiers().collect(NamedElement::getName);

        String comment = propertyModifierNames.isEmpty()
                ? ""
                : propertyModifierNames.makeString("    // ", ", ", "\n");

        String        nonNull        = property.isRequired() ? "    @Nonnull\n" : "";
        String        propertyName   = CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, property.getName());
        PrimitiveType primitiveType  = property.getType();
        String        javaReturnType = PrimitiveToReladomoTypeVisitor.getJavaType(primitiveType);
        String        prefix         = primitiveType == PrimitiveType.BOOLEAN ? "is" : "get";

        return String.format("%s%s    %s %s%s();\n", comment, nonNull, javaReturnType, prefix, propertyName);
    }

    private void printStringToFile(@Nonnull Path path, String contents)
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
        catch (FileNotFoundException e)
        {
            throw new RuntimeException(e);
        }
    }
}
