package cool.klass.generator.grahql.schema.query;

import java.nio.file.Path;
import java.text.MessageFormat;

import javax.annotation.Nonnull;

import com.google.common.base.CaseFormat;
import cool.klass.generator.perpackage.AbstractPerPackageGenerator;
import cool.klass.model.meta.domain.api.Classifier;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Enumeration;
import cool.klass.model.meta.domain.api.Klass;
import cool.klass.model.meta.domain.api.PrimitiveType;
import cool.klass.model.meta.domain.api.Type;
import cool.klass.model.meta.domain.api.property.DataTypeProperty;
import org.atteo.evo.inflector.English;
import org.eclipse.collections.api.list.ImmutableList;
import org.eclipse.collections.api.list.MutableList;
import org.eclipse.collections.impl.list.fixed.ArrayAdapter;

public class GraphQLSchemaQueryGenerator
        extends AbstractPerPackageGenerator
{
    public GraphQLSchemaQueryGenerator(@Nonnull DomainModel domainModel)
    {
        super(domainModel);
    }

    @Nonnull
    @Override
    protected Path getPluginRelativePath(Path path)
    {
        return path
                .resolve("graphql")
                .resolve("schema")
                .resolve("query");
    }

    @Nonnull
    @Override
    protected String getFileName()
    {
        return "GraphQLQuerySchema.graphqls";
    }

    @Nonnull
    @Override
    protected String getPackageSourceCode(@Nonnull String fullyQualifiedPackage)
    {
        ImmutableList<Klass> classes = this.domainModel
                .getClasses()
                .reject(Klass::isAbstract)
                .select(each -> each.getPackageName().equals(fullyQualifiedPackage));

        String allSourceCode = classes
                .collect(this::getAllSourceCode)
                .makeString("");

        String byKeySourceCode = classes
                // TODO: Here we're skipping classifiers that have no key properties. This will still allow through Interfaces that do include key properties. Will those work?
                .reject(each -> each.getKeyProperties().isEmpty())
                .collect(this::getByKeySourceCode)
                .makeString("");

        String byOperationSourceCode = classes
                .collect(this::getByOperationSourceCode)
                .makeString("");

        String byFinderSourceCode = classes
                .collect(this::getByFinderSourceCode)
                .makeString("");

        String sourceCode = ""
                + "# Auto-generated by " + this.getClass().getCanonicalName() + "\n"
                + "\n"
                + "extend type Query {\n"
                + allSourceCode
                + "\n"
                + byKeySourceCode
                + "\n"
                + byOperationSourceCode
                + "\n"
                + byFinderSourceCode
                + "}\n"
                + "\n";

        return sourceCode;
    }

    private String getAllSourceCode(Classifier classifier)
    {
        return "    " + this.getPropertyName(classifier) + ": [" + classifier.getName() + "!]!\n";
    }

    private String getPropertyName(Classifier classifier)
    {
        String classifierName = classifier.getName();

        String              lowerUnderscore = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, classifierName);
        MutableList<String> splits          = ArrayAdapter.adapt(lowerUnderscore.split("_"));

        return splits
                .collectWithIndex((eachSplit, index) -> this.capitalizeSplit(eachSplit, index, splits.size()))
                .makeString("");
    }

    private String capitalizeSplit(String eachSplit, int index, int splitsSize)
    {
        return this.getCapitalized(index, this.getPluralized(index, splitsSize, eachSplit));
    }

    private String getPluralized(int index, int splitsSize, String eachSplit)
    {
        return index == splitsSize - 1 ? English.plural(eachSplit) : eachSplit;
    }

    private String getCapitalized(int index, String eachSplit)
    {
        return index != 0
                ? CaseFormat.LOWER_UNDERSCORE.to(CaseFormat.UPPER_CAMEL, eachSplit)
                : eachSplit;
    }

    private String getByKeySourceCode(Classifier classifier)
    {
        String classifierName = classifier.getName();
        String lowerCaseName  = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, classifierName);

        String parameters = classifier
                .getKeyProperties()
                .collect(this::getParameterSourceCode)
                .makeString();
        return "    " + lowerCaseName + "(" + parameters + "): " + classifierName + "\n";
    }

    private String getByOperationSourceCode(Classifier classifier)
    {
        String classifierName = classifier.getName();
        String lowerCaseName  = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, classifierName);
        return MessageFormat.format(
                "    {0}ByOperation(operation: String!, orderBy: [_{1}OrderBy!]! = [], pageNumber: Int = 1, pageSize: Int = 20): [{1}!]!\n",
                lowerCaseName,
                classifierName);
    }

    private String getByFinderSourceCode(Classifier classifier)
    {
        String classifierName = classifier.getName();
        String lowerCaseName  = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, classifierName);

        return MessageFormat.format(
                "    {0}ByFinder(operation: _{1}Finder!, orderBy: [_{1}OrderBy!]! = [], pageNumber: Int = 1, pageSize: Int = 20): [{1}!]!\n",
                lowerCaseName,
                classifierName);
    }

    private String getParameterSourceCode(DataTypeProperty dataTypeProperty)
    {
        String propertyName = dataTypeProperty.getName();
        String scalarType   = GraphQLSchemaQueryGenerator.convertType(dataTypeProperty.getType());
        String multiplicity = dataTypeProperty.isRequired() ? "!" : "";
        return String.format("%s: %s%s", propertyName, scalarType, multiplicity);
    }

    private static String convertType(@Nonnull Type type)
    {
        if (type instanceof Enumeration)
        {
            return "String";
        }
        if (type == PrimitiveType.INTEGER)
        {
            return "Int";
        }
        if (type == PrimitiveType.DOUBLE)
        {
            return "Float";
        }
        return type.toString();
    }
}
