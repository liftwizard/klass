package cool.klass.generator.klass.projection;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.nio.file.Path;
import java.util.Objects;

import javax.annotation.Nonnull;

import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Klass;
import cool.klass.model.meta.domain.api.PackageableElement;
import cool.klass.model.meta.domain.api.property.DataTypeProperty;
import org.eclipse.collections.api.RichIterable;
import org.eclipse.collections.api.tuple.Pair;

public class KlassProjectionGenerator
{
    @Nonnull
    private final DomainModel domainModel;

    public KlassProjectionGenerator(@Nonnull DomainModel domainModel)
    {
        this.domainModel = Objects.requireNonNull(domainModel);
    }

    public void writeKlassFiles(@Nonnull Path outputPath)
    {
        this.domainModel
                .getClasses()
                .groupBy(PackageableElement::getPackageName)
                .keyMultiValuePairsView()
                .forEachWith(this::writeFile, outputPath);
    }

    private void writeFile(Pair<String, RichIterable<Klass>> packagePair, Path outputPath)
    {
        String              fullyQualifiedPackage = packagePair.getOne();
        RichIterable<Klass> klasses               = packagePair.getTwo();

        Path   klassOutputPath = this.getOutputPath(outputPath, fullyQualifiedPackage);
        String projectionSourceCode = this.getKlassSourceCode(klasses, fullyQualifiedPackage);

        this.printStringToFile(klassOutputPath, projectionSourceCode);
    }

    @Nonnull
    private Path getOutputPath(
            @Nonnull Path outputPath,
            @Nonnull String fullyQualifiedPackage)
    {
        String packageRelativePath = fullyQualifiedPackage.replaceAll("\\.", "/");
        Path   klassDirectory      = outputPath.resolve(packageRelativePath);
        String fileName            = fullyQualifiedPackage + ".klass";

        klassDirectory.toFile().mkdirs();
        return klassDirectory.resolve(fileName);
    }

    @Nonnull
    private String getKlassSourceCode(
            @Nonnull RichIterable<Klass> klasses,
            @Nonnull String fullyQualifiedPackage)
    {
        String sourceCode = klasses
                .collect(KlassProjectionGenerator::getSourceCode)
                .makeString("\n\n");

        //language=Klass
        return "package " + fullyQualifiedPackage + ".inference\n"
                + "\n"
                + "/*\n"
                + " * Auto-generated by {@link " + this.getClass().getCanonicalName() + "}\n"
                + " */\n"
                + "\n"
                + sourceCode;
    }

    private static String getSourceCode(Klass klass)
    {
        return ""
                + "projection " + klass.getName() + "Projection on " + klass.getName() + "\n"
                + "{\n"
                + klass.getDataTypeProperties().collect(KlassProjectionGenerator::getSourceCode).makeString("")
                + "}\n";
    }

    private static String getSourceCode(DataTypeProperty dataTypeProperty)
    {
        return String.format(
                "    %s: \"%s %s\",\n",
                dataTypeProperty.getName(),
                dataTypeProperty.getOwningClassifier().getName(),
                dataTypeProperty.getName());
    }

    private void printStringToFile(@Nonnull Path path, String contents)
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
        catch (FileNotFoundException e)
        {
            throw new RuntimeException(e);
        }
    }
}
