package cool.klass.generator.klass.projection;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.nio.file.Path;
import java.util.Objects;

import javax.annotation.Nonnull;

import cool.klass.model.meta.domain.api.Classifier;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.PackageableElement;
import cool.klass.model.meta.domain.api.property.AssociationEnd;
import cool.klass.model.meta.domain.api.property.DataTypeProperty;
import cool.klass.model.meta.domain.api.property.ReferenceProperty;
import org.eclipse.collections.api.list.ImmutableList;

public class KlassProjectionGenerator
{
    @Nonnull
    private final DomainModel domainModel;

    public KlassProjectionGenerator(@Nonnull DomainModel domainModel)
    {
        this.domainModel = Objects.requireNonNull(domainModel);
    }

    public void writeKlassFiles(@Nonnull Path outputPath)
    {
        ImmutableList<String> packageNames = this.domainModel
                .getClassifiers()
                .asLazy()
                .collect(PackageableElement::getPackageName)
                .distinct()
                .toImmutableList();
        for (String packageName : packageNames)
        {
            this.writeFile(packageName, outputPath);
        }
    }

    private void writeFile(String fullyQualifiedPackage, Path outputPath)
    {
        Path klassOutputPath = this.getOutputPath(outputPath, fullyQualifiedPackage);
        String sourceCode    = getPackageSourceCode(this.domainModel, fullyQualifiedPackage);

        this.printStringToFile(klassOutputPath, sourceCode);
    }

    @Nonnull
    private Path getOutputPath(
            @Nonnull Path outputPath,
            @Nonnull String fullyQualifiedPackage)
    {
        String packageRelativePath = fullyQualifiedPackage.replaceAll("\\.", "/");
        Path   klassDirectory      = outputPath.resolve(packageRelativePath);
        String fileName            = fullyQualifiedPackage + ".klass";

        klassDirectory.toFile().mkdirs();
        return klassDirectory.resolve(fileName);
    }

    @Nonnull
    public static String getPackageSourceCode(@Nonnull DomainModel domainModel, @Nonnull String fullyQualifiedPackage)
    {
        String sourceCode = domainModel
                .getClassifiers()
                .select(c -> c.getPackageName().equals(fullyQualifiedPackage))
                .collect(KlassProjectionGenerator::getSourceCode)
                .makeString("\n");

        //language=Klass
        return ""
                + "package " + fullyQualifiedPackage + ".inference\n"
                + "\n"
                + "/*\n"
                + " * Auto-generated by {@link " + KlassProjectionGenerator.class.getCanonicalName() + "}\n"
                + " */\n"
                + "\n"
                + sourceCode;
    }

    public static String getSourceCode(Classifier classifier)
    {
        String dataTypePropertiesSourceCode = classifier
                .getDataTypeProperties()
                .reject(DataTypeProperty::isForeignKey)
                .reject(DataTypeProperty::isPrivate)
                .reject(DataTypeProperty::isTemporalRange)
                .collect(KlassProjectionGenerator::getSourceCode)
                .makeString("");

        String referencePropertiesSourceCode = classifier
                .getProperties()
                .selectInstancesOf(ReferenceProperty.class)
                .select(KlassProjectionGenerator::includeInProjection)
                .reject(ReferenceProperty::isPrivate)
                .collect(KlassProjectionGenerator::getSourceCode)
                .makeString("");

        return ""
                + "projection " + classifier.getName() + "Projection on " + classifier.getName() + "\n"
                + "{\n"
                + dataTypePropertiesSourceCode
                + referencePropertiesSourceCode
                + "}\n";
    }

    private static String getSourceCode(DataTypeProperty dataTypeProperty)
    {
        return String.format(
                "    %s: \"%s %s\",\n",
                dataTypeProperty.getName(),
                dataTypeProperty.getOwningClassifier().getName(),
                dataTypeProperty.getName());
    }

    private static String getSourceCode(ReferenceProperty referenceProperty)
    {
        return String.format("    %s: %sProjection,\n", referenceProperty.getName(), referenceProperty.getType().getName());
    }

    private static boolean includeInProjection(ReferenceProperty referenceProperty)
    {
        if (!(referenceProperty instanceof AssociationEnd associationEnd))
        {
            return true;
        }

        return associationEnd.getOwningAssociation().getTargetAssociationEnd() == associationEnd;
    }

    private void printStringToFile(@Nonnull Path path, String contents)
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
        catch (FileNotFoundException e)
        {
            throw new RuntimeException(e);
        }
    }
}
