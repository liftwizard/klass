package cool.klass.generator.klass.projection;

import javax.annotation.Nonnull;

import cool.klass.model.meta.domain.api.Classifier;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.property.AssociationEnd;
import cool.klass.model.meta.domain.api.property.DataTypeProperty;
import cool.klass.model.meta.domain.api.property.ReferenceProperty;

public final class KlassProjectionSourceCodeGenerator
{
    private KlassProjectionSourceCodeGenerator()
    {
        throw new AssertionError("Suppress default constructor for noninstantiability");
    }

    @Nonnull
    public static String getPackageSourceCode(DomainModel domainModel, String fullyQualifiedPackage)
    {
        String sourceCode = domainModel
                .getClassifiers()
                .select(c -> c.getPackageName().equals(fullyQualifiedPackage))
                .collect(KlassProjectionSourceCodeGenerator::getSourceCode)
                .makeString("\n");

        //language=Klass
        return "package " + fullyQualifiedPackage + ".inference\n"
                + '\n'
                + "/*\n"
                + " * Auto-generated by {@link " + KlassProjectionGenerator.class.getCanonicalName() + "}\n"
                + " */\n"
                + '\n'
                + sourceCode;
    }

    public static String getSourceCode(Classifier classifier)
    {
        String dataTypePropertiesSourceCode = classifier
                .getDataTypeProperties()
                .reject(DataTypeProperty::isForeignKey)
                .reject(DataTypeProperty::isPrivate)
                .reject(DataTypeProperty::isTemporalRange)
                .collect(KlassProjectionSourceCodeGenerator::getSourceCode)
                .makeString("");

        String referencePropertiesSourceCode = classifier
                .getProperties()
                .selectInstancesOf(ReferenceProperty.class)
                .select(KlassProjectionSourceCodeGenerator::includeInProjection)
                .reject(ReferenceProperty::isPrivate)
                .collect(KlassProjectionSourceCodeGenerator::getSourceCode)
                .makeString("");

        return "projection " + classifier.getName() + "Projection on " + classifier.getName() + '\n'
                + "{\n"
                + dataTypePropertiesSourceCode
                + referencePropertiesSourceCode
                + "}\n";
    }

    private static String getSourceCode(DataTypeProperty dataTypeProperty)
    {
        return String.format(
                "    %s: \"%s %s\",\n",
                dataTypeProperty.getName(),
                dataTypeProperty.getOwningClassifier().getName(),
                dataTypeProperty.getName());
    }

    private static String getSourceCode(ReferenceProperty referenceProperty)
    {
        return String.format("    %s: %sProjection,\n", referenceProperty.getName(), referenceProperty.getType().getName());
    }

    private static boolean includeInProjection(ReferenceProperty referenceProperty)
    {
        return !(referenceProperty instanceof AssociationEnd associationEnd)
                || associationEnd.getOwningAssociation().getTargetAssociationEnd() == associationEnd;
    }
}
