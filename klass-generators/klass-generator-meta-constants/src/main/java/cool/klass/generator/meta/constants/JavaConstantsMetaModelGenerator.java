package cool.klass.generator.meta.constants;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Path;
import java.time.Instant;
import java.util.Objects;

import javax.annotation.Nonnull;

import cool.klass.model.meta.domain.DomainModel;
import cool.klass.model.meta.domain.Enumeration;
import cool.klass.model.meta.domain.Klass;
import cool.klass.model.meta.domain.PackageableElement;

public class JavaConstantsMetaModelGenerator
{
    @Nonnull
    private final DomainModel domainModel;
    private final Instant     now;

    public JavaConstantsMetaModelGenerator(@Nonnull DomainModel domainModel, Instant now)
    {
        this.domainModel = Objects.requireNonNull(domainModel);
        this.now = now;
    }

    public void writeJavaConstantsMetaModelFiles(@Nonnull Path outputPath) throws IOException
    {
        for (Enumeration enumeration : this.domainModel.getEnumerations())
        {
            Path dtoOutputPath = this.getOutputPath(outputPath, enumeration);
            this.printStringToFile(dtoOutputPath, this.getEnumerationSourceCode(enumeration));
        }

        for (Klass klass : this.domainModel.getKlasses())
        {
            Path dtoOutputPath = this.getOutputPath(outputPath, klass);
            this.printStringToFile(dtoOutputPath, this.getClassSourceCode(klass));
        }
    }

    @Nonnull
    public Path getOutputPath(
            @Nonnull Path outputPath,
            PackageableElement packageableElement)
    {
        String packageRelativePath = packageableElement.getPackageName()
                .replaceAll("\\.", "/");
        Path directory = outputPath
                .resolve(packageRelativePath)
                .resolve("meta")
                .resolve("constants");
        directory.toFile().mkdirs();
        String fileName = packageableElement.getName() + "_" + packageableElement.getClass().getSimpleName() + ".java";
        return directory.resolve(fileName);
    }

    private void printStringToFile(@Nonnull Path path, String contents) throws FileNotFoundException
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
    }

    @Nonnull
    private String getEnumerationSourceCode(Enumeration enumeration)
    {
        String packageName = enumeration.getPackageName() + ".meta.constants";

        //language=JAVA
        String sourceCode = ""
                + "package " + packageName + ";\n"
                + "\n"
                + "import javax.annotation.Generated;\n"
                + "\n"
                + "/**\n"
                + " * Auto-generated by {@link cool.klass.generator.meta.constants.JavaConstantsMetaModelGenerator}\n"
                + " */\n"
                + "@Generated(\n"
                + "        value = \"cool.klass.generator.meta.constants.JavaConstantsMetaModelGenerator\",\n"
                + "        date = \"" + this.now + "\")\n"
                + "public enum " + enumeration.getName() + "_" + "Enumeration implements IEnumeration\n"
                + "{\n"
                + "}\n";
        return sourceCode;
    }

    @Nonnull
    private String getClassSourceCode(Klass klass)
    {
        String packageName = klass.getPackageName() + ".meta.constants";

        //language=JAVA
        String sourceCode = ""
                + "package " + packageName + ";\n"
                + "\n"
                + "import javax.annotation.Generated;\n"
                + "\n"
                + "/**\n"
                + " * Auto-generated by {@link cool.klass.generator.meta.constants.JavaConstantsMetaModelGenerator}\n"
                + " */\n"
                + "@Generated(\n"
                + "        value = \"cool.klass.generator.meta.constants.JavaConstantsMetaModelGenerator\",\n"
                + "        date = \"" + this.now + "\")\n"
                + "public class " + klass.getName() + "_Klass implements IKlass\n"
                + "{\n"
                + "}\n";
        return sourceCode;
    }
}
