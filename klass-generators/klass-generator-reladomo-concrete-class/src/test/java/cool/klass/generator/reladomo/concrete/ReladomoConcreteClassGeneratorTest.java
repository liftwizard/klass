package cool.klass.generator.reladomo.concrete;

import java.util.Optional;

import cool.klass.model.converter.compiler.CompilationResult;
import cool.klass.model.converter.compiler.CompilationUnit;
import cool.klass.model.converter.compiler.CompilerState;
import cool.klass.model.converter.compiler.DomainModelCompilationResult;
import cool.klass.model.converter.compiler.ErrorsCompilationResult;
import cool.klass.model.converter.compiler.KlassCompiler;
import cool.klass.model.converter.compiler.error.RootCompilerError;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Klass;
import org.eclipse.collections.api.list.ImmutableList;
import org.junit.Test;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.fail;

public class ReladomoConcreteClassGeneratorTest
{
    @Test
    public void smokeTest()
    {
        //<editor-fold desc="sourceCode">
        //language=Klass
        String klassSourceCode = ""
                + "package cool.klass.test\n"
                + "\n"
                + "class ClassWithDerivedProperty\n"
                + "{\n"
                + "    key                : String key;\n"
                + "\n"
                + "    derivedRequiredString      : String    derived;\n"
                + "    derivedRequiredInteger     : Integer   derived;\n"
                + "    derivedRequiredLong        : Long      derived;\n"
                + "    derivedRequiredDouble      : Double    derived;\n"
                + "    derivedRequiredFloat       : Float     derived;\n"
                + "    derivedRequiredBoolean     : Boolean   derived;\n"
                + "    derivedRequiredInstant     : Instant   derived;\n"
                + "    derivedRequiredLocalDate   : LocalDate derived;\n"
                + "\n"
                + "    derivedOptionalString      : String    ? derived;\n"
                + "    derivedOptionalInteger     : Integer   ? derived;\n"
                + "    derivedOptionalLong        : Long      ? derived;\n"
                + "    derivedOptionalDouble      : Double    ? derived;\n"
                + "    derivedOptionalFloat       : Float     ? derived;\n"
                + "    derivedOptionalBoolean     : Boolean   ? derived;\n"
                + "    derivedOptionalInstant     : Instant   ? derived;\n"
                + "    derivedOptionalLocalDate   : LocalDate ? derived;\n"
                + "}\n";
        //</editor-fold>

        CompilationUnit compilationUnit = CompilationUnit.createFromText(
                Optional.empty(),
                "example.klass",
                klassSourceCode);
        CompilerState     compilerState     = new CompilerState(compilationUnit);
        KlassCompiler     compiler          = new KlassCompiler(compilerState);
        CompilationResult compilationResult = compiler.compile();

        if (compilationResult instanceof ErrorsCompilationResult)
        {
            ErrorsCompilationResult          errorsCompilationResult = (ErrorsCompilationResult) compilationResult;
            ImmutableList<RootCompilerError> compilerErrors          = errorsCompilationResult.getCompilerErrors();
            String                           message                 = compilerErrors.makeString("\n");
            fail(message);
        }
        else if (compilationResult instanceof DomainModelCompilationResult)
        {
            DomainModelCompilationResult domainModelCompilationResult = (DomainModelCompilationResult) compilationResult;
            DomainModel                  domainModel                  = domainModelCompilationResult.getDomainModel();
            assertThat(domainModel, notNullValue());

            ReladomoConcreteClassGenerator generator = new ReladomoConcreteClassGenerator(domainModel);

            Klass  klass           = domainModel.getClassByName("ClassWithDerivedProperty");
            String javaSourceCode = generator.getSourceCode(klass);

            //<editor-fold desc="expected java code">
            //language=JAVA
            String expectedSourceCode = ""
                    + "package cool.klass.test;\n"
                    + "\n"
                    + "import java.sql.*;\n"
                    + "import java.time.*;\n"
                    + "\n"
                    + "import com.gs.fw.common.mithra.util.DefaultInfinityTimestamp;\n"
                    + "\n"
                    + "import cool.klass.test.reladomo.readable.*;\n"
                    + "\n"
                    + "/**\n"
                    + " * Auto-generated by {@link cool.klass.generator.reladomo.concrete.ReladomoConcreteClassGenerator}\n"
                    + " */\n"
                    + "public class ClassWithDerivedProperty\n"
                    + "        extends ClassWithDerivedPropertyAbstract\n"
                    + "        implements ReladomoReadableClassWithDerivedProperty\n"
                    + "{\n"
                    + "    public ClassWithDerivedProperty(Timestamp system)\n"
                    + "    {\n"
                    + "        super(system);\n"
                    + "        // You must not modify this constructor. Mithra calls this internally.\n"
                    + "        // You can call this constructor. You can also add new constructors.\n"
                    + "    }\n"
                    + "\n"
                    + "    public ClassWithDerivedProperty()\n"
                    + "    {\n"
                    + "        this(DefaultInfinityTimestamp.getDefaultInfinity());\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public String getDerivedRequiredString()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredString\n"
                    + "        return \"ClassWithDerivedProperty derivedRequiredString 1 \\u261D\";\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Integer getDerivedRequiredInteger()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredInteger\n"
                    + "        return 1;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Long getDerivedRequiredLong()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredLong\n"
                    + "        return 100000000000L;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Double getDerivedRequiredDouble()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredDouble\n"
                    + "        return 1.0123456789;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Float getDerivedRequiredFloat()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredFloat\n"
                    + "        return 1.0123457f;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Boolean getDerivedRequiredBoolean()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredBoolean\n"
                    + "        return true;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Instant getDerivedRequiredInstant()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredInstant\n"
                    + "        return Instant.parse(\"1999-12-31T23:59:00Z\");\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public LocalDate getDerivedRequiredLocalDate()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedRequiredLocalDate\n"
                    + "        return LocalDate.parse(\"1999-12-31\");\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public String getDerivedOptionalString()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalString\n"
                    + "        return \"ClassWithDerivedProperty derivedOptionalString 1 \\u261D\";\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Integer getDerivedOptionalInteger()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalInteger\n"
                    + "        return 1;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Long getDerivedOptionalLong()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalLong\n"
                    + "        return 100000000000L;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Double getDerivedOptionalDouble()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalDouble\n"
                    + "        return 1.0123456789;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Float getDerivedOptionalFloat()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalFloat\n"
                    + "        return 1.0123457f;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Boolean getDerivedOptionalBoolean()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalBoolean\n"
                    + "        return true;\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public Instant getDerivedOptionalInstant()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalInstant\n"
                    + "        return Instant.parse(\"1999-12-31T23:59:00Z\");\n"
                    + "    }\n"
                    + "\n"
                    + "    @Override\n"
                    + "    public LocalDate getDerivedOptionalLocalDate()\n"
                    + "    {\n"
                    + "        // TODO implement derived property: derivedOptionalLocalDate\n"
                    + "        return LocalDate.parse(\"1999-12-31\");\n"
                    + "    }\n"
                    + "}\n";
            //</editor-fold>

            assertThat(javaSourceCode, javaSourceCode, is(expectedSourceCode));
        }
        else
        {
            fail(compilationResult.getClass().getSimpleName());
        }
    }
}
