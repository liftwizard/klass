package cool.klass.generator.reladomo.concrete;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.nio.file.Path;
import java.util.Objects;

import javax.annotation.Nonnull;

import com.google.common.base.CaseFormat;
import cool.klass.model.meta.domain.api.DomainModel;
import cool.klass.model.meta.domain.api.Klass;
import cool.klass.model.meta.domain.api.PrimitiveType;
import cool.klass.model.meta.domain.api.property.PrimitiveProperty;
import cool.klass.model.meta.domain.api.property.Property;
import cool.klass.model.meta.domain.api.visitor.PrimitiveToJavaTypeVisitor;
import cool.klass.reladomo.sample.data.RequiredDataTypePropertyVisitor;
import org.eclipse.collections.api.list.ImmutableList;

public class ReladomoConcreteClassGenerator
{
    private final DomainModel domainModel;

    public ReladomoConcreteClassGenerator(DomainModel domainModel)
    {
        this.domainModel = Objects.requireNonNull(domainModel);
    }

    public void writeConcreteClasses(@Nonnull Path path)
    {
        for (Klass klass : this.domainModel.getClasses())
        {
            String sourceCode = this.getSourceCode(klass);
            this.printStringToFile(path, sourceCode);
        }
    }

    public String getSourceCode(@Nonnull Klass klass)
    {
        Objects.requireNonNull(klass);

        String packageName = klass.getPackageName();
        String className   = klass.getName();
        ImmutableList<PrimitiveProperty> primitiveProperties = klass
                .getProperties()
                .selectInstancesOf(PrimitiveProperty.class)
                .select(Property::isDerived);

        String derivedPropertiesSourceCode = this.getDerivedPropertiesSourceCode(primitiveProperties);

        //language=JAVA
        return ""
                + "package " + packageName + ";\n"
                + "\n"
                + "import java.sql.*;\n"
                + "import java.time.*;\n"
                + "\n"
                + "import com.gs.fw.common.mithra.util.DefaultInfinityTimestamp;\n"
                + "\n"
                + "import " + packageName + ".reladomo.readable.*;\n"
                + "\n"
                + "/**\n"
                + " * Auto-generated by {@link cool.klass.generator.reladomo.concrete.ReladomoConcreteClassGenerator}\n"
                + " */\n"
                + "public class " + className + "\n"
                + "        extends " + className + "Abstract\n"
                + "        implements ReladomoReadable" + className + "\n"
                + "{\n"
                + "    public " + className + "(Timestamp system)\n"
                + "    {\n"
                + "        super(system);\n"
                + "        // You must not modify this constructor. Mithra calls this internally.\n"
                + "        // You can call this constructor. You can also add new constructors.\n"
                + "    }\n"
                + "\n"
                + "    public " + className + "()\n"
                + "    {\n"
                + "        this(DefaultInfinityTimestamp.getDefaultInfinity());\n"
                + "    }\n"
                + derivedPropertiesSourceCode
                + "}\n";
    }

    private String getDerivedPropertiesSourceCode(ImmutableList<PrimitiveProperty> derivedProperties)
    {
        return derivedProperties
                .collect(this::getDerivedPropertySourceCode)
                .makeString("");
    }

    private String getDerivedPropertySourceCode(PrimitiveProperty derivedProperty)
    {
        String        propertyName   = CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_CAMEL, derivedProperty.getName());
        PrimitiveType primitiveType  = derivedProperty.getType();
        String        javaReturnType = PrimitiveToJavaTypeVisitor.getJavaType(primitiveType);

        RequiredDataTypePropertyVisitor visitor = new RequiredDataTypePropertyVisitor();
        derivedProperty.visit(visitor);
        Object value = visitor.getResult();

        ValueToJavaSourceCodePrimitiveTypeVisitor sourceCodeVisitor =
                new ValueToJavaSourceCodePrimitiveTypeVisitor(value);

        primitiveType.visit(sourceCodeVisitor);
        String valueSourceCode = sourceCodeVisitor.getResult();

        //language=JAVA
        return ""
                + "\n"
                + "    @Override\n"
                + "    public " + javaReturnType + " get" + propertyName + "()\n"
                + "    {\n"
                + "        // TODO implement derived property: " + derivedProperty.getName() + "\n"
                + "        return " + valueSourceCode + ";\n"
                + "    }\n";
    }

    private void printStringToFile(@Nonnull Path path, String contents)
    {
        try (PrintStream printStream = new PrintStream(new FileOutputStream(path.toFile())))
        {
            printStream.print(contents);
        }
        catch (FileNotFoundException e)
        {
            throw new RuntimeException(e);
        }
    }
}
