package dummy

interface InterfaceWithUnresolved implements UnresolvedInterface1, UnresolvedInterface2
{
    unresolvedEnumerationProperty: UnresolvedEnumeration key;
}

class ClassWithUnresolved extends UnresolvedClass implements UnresolvedInterface1, UnresolvedInterface2
{
    unresolvedEnumerationProperty: UnresolvedEnumeration key;

    unresolvedParameterizedProperty(): UnresolvedClass[1..1]
    {
        this.unresolvedEnumerationProperty == UnresolvedEnumeration.unresolvedEnumerationLiteral
    }
}

association AssociationWithUnresolved1
{
    parent: UnresolvedClass[0..1];
    children: UnresolvedClass[0..*]
        orderBy: this.irrelevantProperty ascending;

    relationship this.unresolvedEnumerationProperty == UnresolvedClass.unresolvedEnumerationProperty
}

association AssociationWithUnresolved2
{
    classWithUnresolved: ClassWithUnresolved[0..1];
    associationEndToUnresolvedClass: UnresolvedClass[0..*];

    relationship this.unresolvedEnumerationProperty == UnresolvedClass.unresolvedEnumerationProperty
}

projection ProjectionWithUnresolved on ClassWithUnresolved
{
    unresolvedDataProperty: "Header",
    unresolvedEnumerationProperty: "Header",
    unresolvedParameterizedProperty: {
        irrelevantProperty:"Header",
    },
    unresolvedReferenceProperty:{
        irrelevantProperty:"Header",
    },
    associationEndToUnresolvedClass: "Header",
    UnresolvedClass.irrelevantProperty: "Header",
}

projection EmptyProjection on ClassWithUnresolved
{
}

projection ProjectionWithUnresolvedClass on UnresolvedClass
{
    unresolvedProjectionMember: "Header",
    unresolvedProjectionAssociationEnd: {
        unresolvedProjectionMemberEmbedded: "Header",
    },
    unresolvedProjectionMember3: UnresolvedProjection,
    IrrelevantClass.irrelevantProperty: "Header",
}

class Parent
{
    key: String key;

    unresolvedParameterizedProperty(): Child[1..1]
    {
        this.unresolvedMember == Child.unresolvedMember
    }
}

class Child
{
    key: String key;
    parentKey: String private;
}

association ParentHasChild
{
    parent: Parent[0..1];
    children: Child[0..*]
        orderBy: this.unresolvedMember ascending;
}

association BadRelationship2
{
    parent2: Parent[0..1];
    children2: Child[0..*];

    relationship this.unresolvedMember == Child.unresolvedMember
}

association BadRelationship3
{
    parent3: Parent[0..1];
    children3: Child[0..*];

    relationship this.key == UnresolvedClass.unresolvedMember
}

association ParentDoesNotHaveUnresolvedClass
{
    parent: Parent[1..1];
    unresolvedClasses: UnresolvedClass[0..*];

    relationship this.key == UnresolvedClass.parentKey
}

projection ParentProjection on Parent
{
    unresolvedProjectionMember: "Header",
    // Not found association end
    unresolvedProjectionAssociationEnd: {
        unresolvedProjectionMemberEmbedded: "Header",
    },
    unresolvedProjectionMember3: UnresolvedProjection,
    // Valid association end
    children:
    {
        unresolvedProjectionMember: "Header",
        unresolvedProjectionAssociationEnd:
        {
            unresolvedProjectionMemberEmbedded: "Header",
        },
        unresolvedProjectionReference: UnresolvedProjection,
    },
    // Found association with not found type
    unresolvedClasses:
    {
        unresolvedProjectionMember: "Header",
        unresolvedProjectionAssociationEnd:
        {
            unresolvedProjectionMemberEmbedded: "Header",
        },
        unresolvedProjectionReference: UnresolvedProjection,
    },
}

projection ParentProjection2 on Parent
{
    children: ChildProjection,
}

service ClassWithUnresolvedResource on ClassWithUnresolved
{
    /unresolved/{unresolvedParameterDeclaration: UnresolvedEnumeration[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.unresolvedEnumerationProperty == unresolvedParameter;
            projection  : UnresolvedProjection;
            orderBy     : this.unresolvedEnumerationProperty;
        }
    /fake1
        GET
        {
            multiplicity: one;
            criteria    : all;
            projection  : ProjectionWithUnresolvedClass;
            orderBy     : this.unresolvedMember;
        }
}

service UnresolvedClassResource on UnresolvedClass
{
    /fake
        GET
        {
            multiplicity: one;
            criteria    : this.irrelevantProperty == irrelevantParameter;
            projection  : IrrelevantProjection;
            orderBy     : this.irrelevantProperty;
        }
}
