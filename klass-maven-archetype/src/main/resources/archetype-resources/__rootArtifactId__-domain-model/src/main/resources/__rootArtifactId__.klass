package ${package}

// 'user' is a special class that represents logged in users
// There must only be a single user class in the model, it must have a single key, and the key must be of type String.
// Other properties must be nullable
user User
    systemTemporal
{
    userId   : String key userId;
    firstName: String?;
    lastName : String?;
    email    : String?;
}

projection UserProjection on User
{
    userId    : "User userId",
    systemFrom: "User systemFrom",
    systemTo  : "User systemTo",
    firstName : "User firstName",
    lastName  : "User lastName",
    email     : "User email",
}

service UserResource on User
{
    /user/{userId: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.userId == userId;
            projection  : UserProjection;
        }
        PUT
        {
            criteria    : this.userId == userId;
        }
    /user
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : UserProjection;
        }
}

class DeleteMeExampleType
    systemTemporal
    versioned
    audited
{
    id         : Long id key;
    name       : String maxLength(128);
}

class DeleteMeExampleOwnedType
    systemTemporal
{
    id                   : Long id key;
    deleteMeExampleTypeId: Long private;
    name                 : String maxLength(128);
}

association DeleteMeExampleToOwned
{
    deleteMeExampleType: DeleteMeExampleType[1..1];
    deleteMeExampleOwnedTypes: DeleteMeExampleOwnedType[0..*] owned;
}

projection DeleteMeExampleOwnedTypeProjection on DeleteMeExampleOwnedType
{
    id: "DeleteMeExampleOwnedType id",
    systemFrom: "DeleteMeExampleOwnedType systemFrom",
    systemTo: "DeleteMeExampleOwnedType systemTo",
    name: "DeleteMeExampleOwnedType name",
}

projection DeleteMeExampleTypeVersionProjection on DeleteMeExampleTypeVersion
{
    systemFrom: "DeleteMeExampleTypeVersion systemFrom",
    systemTo: "DeleteMeExampleTypeVersion systemTo",
    createdOn: "DeleteMeExampleTypeVersion createdOn",
    number: "DeleteMeExampleTypeVersion number",
    createdBy: {
        userId: "User userId",
    },
    lastUpdatedBy: {
        userId: "User userId",
    },
}

projection DeleteMeExampleTypeProjection on DeleteMeExampleType
{
    id: "DeleteMeExampleType id",
    systemFrom: "DeleteMeExampleType systemFrom",
    systemTo: "DeleteMeExampleType systemTo",
    createdOn: "DeleteMeExampleType createdOn",
    name: "DeleteMeExampleType name",
    deleteMeExampleOwnedTypes: DeleteMeExampleOwnedTypeProjection,
    version: DeleteMeExampleTypeVersionProjection,
    createdBy: {
        userId: "User userId",
    },
    lastUpdatedBy: {
        userId: "User userId",
    },
}

service DeleteMeExampleTypeResource on DeleteMeExampleType
{
    /deleteMeExampleType/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : DeleteMeExampleTypeProjection;
        }
        PUT
        {
            criteria    : this.id == id;
        }
    /deleteMeExampleTypes
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : DeleteMeExampleTypeProjection;
        }
}
