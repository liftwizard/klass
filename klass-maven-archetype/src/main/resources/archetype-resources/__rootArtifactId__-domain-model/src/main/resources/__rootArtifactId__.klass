package ${package}

// 'user' is a special class that represents logged in users
// There must only be a single user class in the model, it must have a single key, and the key must be of type String.
// Other properties must be nullable
user User
    systemTemporal
{
    userId   : String key userId;
    firstName: String?;
    lastName : String?;
    email    : String?;
}

projection UserReadProjection on User
{
    userId   : "User id",
    firstName: "User first name",
    lastName : "User last name",
    email    : "User email",
}

service User
{
    /user/{userId: String[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.userId == userId;
            projection  : UserReadProjection;
        }
    /user
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : UserReadProjection;
        }
}

class DeleteMeExampleType
    systemTemporal
    versioned
    audited
{
    id         : Long id key;
    name       : String maxLength(128);
}

class DeleteMeExampleOwnedType
    systemTemporal
{
    id                   : Long id key;
    deleteMeExampleTypeId: Long private;
    name                 : String maxLength(128);
}

association DeleteMeExampleToOwned
{
    deleteMeExampleType: DeleteMeExampleType[1..1];
    deleteMeExampleOwnedTypes: DeleteMeExampleOwnedType[0..*] owned;
}

projection DeleteMeExampleTypeProjection on DeleteMeExampleType
{
    id                      : "Id",
    name                    : "Name",
    deleteMeExampleOwnedTypes:
    {
        id  : "Id",
        name: "Name",
    },
}

service DeleteMeExampleType
{
    /deleteMeExampleType/{id: Long[1..1]}
        GET
        {
            multiplicity: one;
            criteria    : this.id == id;
            projection  : DeleteMeExampleTypeProjection;
        }
    /deleteMeExampleType
        GET
        {
            multiplicity: many;
            criteria    : all;
            projection  : DeleteMeExampleTypeProjection;
        }
}
