/*
 * Copyright 2024 Craig Motlin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cool.klass.service.swagger;

import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Objects;

import javax.annotation.Nonnull;
import javax.ws.rs.GET;
import javax.ws.rs.NotFoundException;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import com.codahale.metrics.annotation.ExceptionMetered;
import com.codahale.metrics.annotation.Timed;
import org.eclipse.collections.api.list.ImmutableList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * JAX-RS resource that serves Swagger/OpenAPI specification files from the classpath.
 * <p>
 * Swagger spec files are generated by the klass-generator-swagger-plugin during build
 * and packaged as resources in the application classpath.
 * </p>
 */
@Path("/")
public class SwaggerSpecResource {

    private static final Logger LOGGER = LoggerFactory.getLogger(SwaggerSpecResource.class);

    @Nonnull
    private final ImmutableList<String> klassSourcePackages;

    public SwaggerSpecResource(@Nonnull ImmutableList<String> klassSourcePackages) {
        this.klassSourcePackages = Objects.requireNonNull(klassSourcePackages);
    }

    /**
     * Serves the combined swagger.json that includes all packages.
     * <p>
     * This endpoint attempts to load swagger.json from the first package.
     * For applications with multiple packages, you may want to merge them or
     * serve them separately via the package-specific endpoint.
     * </p>
     *
     * @return The swagger.json content
     */
    @Timed
    @ExceptionMetered
    @GET
    @Path("/swagger.json")
    @Produces(MediaType.APPLICATION_JSON)
    public String getSwaggerSpec() {
        // Try to load from the first package
        if (this.klassSourcePackages.isEmpty()) {
            throw new NotFoundException("No Klass source packages configured");
        }

        String firstPackage = this.klassSourcePackages.getFirst();
        return this.getSwaggerSpecForPackage(firstPackage);
    }

    /**
     * Serves the swagger.json for a specific package.
     *
     * @param packageName The package name (e.g., "cool.klass.xample.coverage")
     * @return The swagger.json content for the specified package
     */
    @Timed
    @ExceptionMetered
    @GET
    @Path("/swagger/{packageName}.json")
    @Produces(MediaType.APPLICATION_JSON)
    public String getSwaggerSpecByPackage(@PathParam("packageName") String packageName) {
        // Replace dots with slashes for resource path, but keep the dots in the package directory structure
        String normalizedPackage = packageName.replace('.', '/');
        return this.getSwaggerSpecForPackage(packageName);
    }

    private String getSwaggerSpecForPackage(String packageName) {
        // Convert package name to resource path
        // e.g., "cool.klass.xample.coverage" -> "/swagger/cool/klass/xample/coverage/swagger.json"
        String resourcePath = "/swagger/" + packageName.replace('.', '/') + "/swagger.json";

        LOGGER.debug("Loading Swagger spec from: {}", resourcePath);

        try (InputStream inputStream = this.getClass().getResourceAsStream(resourcePath)) {
            if (inputStream == null) {
                LOGGER.warn("Swagger spec not found at: {}", resourcePath);
                throw new NotFoundException("Swagger specification not found for package: " + packageName);
            }

            return new String(inputStream.readAllBytes(), StandardCharsets.UTF_8);
        } catch (IOException e) {
            LOGGER.error("Error reading Swagger spec from: {}", resourcePath, e);
            throw new RuntimeException("Error reading Swagger specification", e);
        }
    }
}
